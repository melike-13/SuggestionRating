import type { Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { pool } from "./db";
import { 
  insertSuggestionSchema, 
  insertUserSchema,
  extendedInsertSuggestionSchema, 
  extendedInsertRewardSchema, 
  SUGGESTION_STATUSES,
  USER_ROLES
} from "@shared/schema";
import { sendStatusChangeNotification, sendNewSuggestionNotification, sendRewardNotification } from "./notifications";
import { fromZodError } from "zod-validation-error";

export async function registerRoutes(app: Express): Promise<Server> {
  // Auth middleware
  const isAuthenticated = (req: Request, res: Response, next: Function) => {
    if (req.isAuthenticated()) {
      return next();
    }
    res.status(401).json({ message: "Not authenticated" });
  };

  const isAdmin = (req: Request, res: Response, next: Function) => {
    if (req.isAuthenticated() && (req.user as any).isAdmin) {
      return next();
    }
    res.status(403).json({ message: "Not authorized" });
  };
  
  const hasRole = (roles: string[]) => {
    return (req: Request, res: Response, next: Function) => {
      if (req.isAuthenticated()) {
        const userRole = (req.user as any).role;
        if (roles.includes(userRole)) {
          return next();
        }
      }
      res.status(403).json({ message: "Not authorized" });
    };
  };
  
  // Role-based middlewares
  const isManager = hasRole([USER_ROLES.MANAGER, USER_ROLES.EXECUTIVE]);
  const isExecutive = hasRole([USER_ROLES.EXECUTIVE]);

  // API Routes
  
  // Users
  app.get('/api/users', isAdmin, async (req, res) => {
    try {
      const users = await storage.listUsers();
      res.json(users);
    } catch (error) {
      res.status(500).json({ message: `Error fetching users: ${error}` });
    }
  });
  
  app.post('/api/users', isAdmin, async (req, res) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      const user = await storage.createUser(userData);
      res.status(201).json(user);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: 'Unknown error occurred' });
      }
    }
  });

  // Suggestions
  app.get('/api/suggestions', async (req, res) => {
    try {
      const suggestions = await storage.listSuggestions();
      res.json(suggestions);
    } catch (error) {
      res.status(500).json({ message: `Error fetching suggestions: ${error}` });
    }
  });
  
  app.get('/api/suggestions/user', isAuthenticated, async (req, res) => {
    try {
      const userId = (req.user as any).id;
      const suggestions = await storage.listSuggestionsByUser(userId);
      res.json(suggestions);
    } catch (error) {
      res.status(500).json({ message: `Error fetching user suggestions: ${error}` });
    }
  });
  
  app.get('/api/suggestions/status/:status', isAuthenticated, async (req, res) => {
    try {
      const { status } = req.params;
      const suggestions = await storage.listSuggestionsByStatus(status);
      res.json(suggestions);
    } catch (error) {
      res.status(500).json({ message: `Error fetching suggestions by status: ${error}` });
    }
  });
  
  app.get('/api/suggestions/:id', isAuthenticated, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const suggestion = await storage.getSuggestion(id);
      
      if (!suggestion) {
        return res.status(404).json({ message: "Suggestion not found" });
      }
      
      res.json(suggestion);
    } catch (error) {
      res.status(500).json({ message: `Error fetching suggestion: ${error}` });
    }
  });
  
  app.post('/api/suggestions', isAuthenticated, async (req, res) => {
    try {
      // Form verilerini검증
      const extendedData = extendedInsertSuggestionSchema.parse(req.body);
      
      // Temel öneri verileri
      const suggestionData = insertSuggestionSchema.parse({
        ...extendedData,
        submittedBy: (req.user as any).id,
        status: req.body.suggestionType === "kivilcim" 
          ? SUGGESTION_STATUSES.KIVILCIM_INITIAL_REVIEW 
          : SUGGESTION_STATUSES.PENDING_REVIEW,
      });
      
      const suggestion = await storage.createSuggestion(suggestionData);
      
      // Bildirim gönder
      await sendNewSuggestionNotification(suggestion);
      
      res.status(201).json(suggestion);
    } catch (error) {
      if (error.name === "ZodError") {
        const validationError = fromZodError(error);
        res.status(400).json({ message: validationError.message });
      } else {
        res.status(500).json({ message: `Error creating suggestion: ${error}` });
      }
    }
  });
  
  app.patch('/api/suggestions/:id', isAuthenticated, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const suggestion = await storage.getSuggestion(id);
      
      if (!suggestion) {
        return res.status(404).json({ message: "Suggestion not found" });
      }
      
      // Farklı roller için yetki kontrolü
      const userRole = (req.user as any).role;
      const userId = (req.user as any).id;
      const previousStatus = suggestion.status;
      
      // Sadece sahibi, yönetici veya yönetici güncelleme yapabilir
      const isOwner = suggestion.submittedBy === userId;
      const canEdit = isOwner || userRole === USER_ROLES.MANAGER || userRole === USER_ROLES.EXECUTIVE;
      
      if (!canEdit) {
        return res.status(403).json({ message: "Not authorized to update this suggestion" });
      }
      
      const updatedSuggestion = await storage.updateSuggestion(id, req.body);
      
      // Durum değişikliği yapıldıysa bildirim gönder
      if (updatedSuggestion && previousStatus !== updatedSuggestion.status) {
        await sendStatusChangeNotification(updatedSuggestion, previousStatus, req.user as any);
      }
      
      res.json(updatedSuggestion);
    } catch (error) {
      res.status(500).json({ message: `Error updating suggestion: ${error}` });
    }
  });
  
  // Rewards
  app.get('/api/rewards/suggestion/:suggestionId', isAuthenticated, async (req, res) => {
    try {
      const suggestionId = parseInt(req.params.suggestionId);
      const rewards = await storage.listRewardsBySuggestion(suggestionId);
      res.json(rewards);
    } catch (error) {
      res.status(500).json({ message: `Error fetching rewards: ${error}` });
    }
  });
  
  app.post('/api/rewards', isManager, async (req, res) => {
    try {
      // Form verilerini검증
      const rewardData = extendedInsertRewardSchema.parse(req.body);
      
      // Ödül verisi oluştur ve kaydet
      const { suggestionId, userId, amount, type } = rewardData;
      const newReward = {
        suggestionId,
        userId, 
        assignedBy: (req.user as any).id,
        amount,
        type,
        assignedAt: new Date()
      };
      
      const reward = await storage.createReward(newReward);
      
      // Bildirim gönder
      await sendRewardNotification(suggestionId, userId, amount, type);
      
      res.status(201).json(reward);
    } catch (error) {
      if (error.name === "ZodError") {
        const validationError = fromZodError(error);
        res.status(400).json({ message: validationError.message });
      } else {
        res.status(500).json({ message: `Error creating reward: ${error}` });
      }
    }
  });
  
  // Stats
  app.get('/api/stats/suggestions', async (req, res) => {
    try {
      const stats = await storage.getSuggestionStats();
      res.json(stats);
    } catch (error) {
      res.status(500).json({ message: `Error fetching stats: ${error}` });
    }
  });
  
  app.get('/api/stats/top-contributors', async (req, res) => {
    try {
      const topContributors = await storage.getTopContributors(5);
      
      // Kullanıcı detaylarını ekleyelim
      const contributors = await Promise.all(
        topContributors.map(async (item) => {
          const user = await storage.getUser(item.userId);
          return { ...item, user };
        })
      );
      
      res.json(contributors);
    } catch (error) {
      res.status(500).json({ message: `Error fetching top contributors: ${error}` });
    }
  });

  // WebSocket server için HTTP server oluştur
  const httpServer = createServer(app);
  
  return httpServer;
}